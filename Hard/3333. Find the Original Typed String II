class Solution(object):
    def possibleStringCount(self, word, k):
        """
        :type word: str
        :type k: int
        :rtype: int
        """
        MOD = 1000000007
        
        # Step 1: Group consecutive identical letters
        # e.g., "aabbbc" -> [2, 3, 1] (2 a's, 3 b's, 1 c)
        groups = []
        count = 1
        
        for i in range(1, len(word)):
            if word[i] == word[i-1]:
                count += 1
            else:
                groups.append(count)
                count = 1
        groups.append(count)
        
        # Step 2: Calculate total combinations without length constraint
        # Each group can contribute any number from 1 to its size
        total_combinations = 1
        for group_size in groups:
            total_combinations = (total_combinations * group_size) % MOD
        
        # Step 3: If k <= number of groups, all combinations are valid
        # (minimum possible length is number of groups, taking 1 from each)
        if k <= len(groups):
            return total_combinations
        
        # Step 4: Use DP to count invalid combinations (length < k)
        # dp[j] = number of ways to form strings of length j using first i groups
        dp = [0] * k
        dp[0] = 1  # Base case: empty string
        
        for group_size in groups:
            new_dp = [0] * k
            window_sum = 0
            
            # For each possible length j
            for j in range(len(new_dp)):
                # Add contribution from current group
                new_dp[j] = (new_dp[j] + window_sum) % MOD
                
                # Update sliding window sum
                if j < len(dp):
                    window_sum = (window_sum + dp[j]) % MOD
                
                # Remove element that's now outside the window
                # (group can contribute at most group_size characters)
                if j >= group_size and j - group_size < len(dp):
                    window_sum = (window_sum - dp[j - group_size] + MOD) % MOD
            
            dp = new_dp
        
        # Step 5: Count invalid combinations (length < k)
        invalid_combinations = sum(dp) % MOD
        
        # Step 6: Return valid combinations
        return (total_combinations - invalid_combinations + MOD) % MOD


# Test cases
def test_solution():
    sol = Solution()
    
    # Test case 1: word = "aabbbc", k = 3
    # Groups: [2, 3, 1], total = 2*3*1 = 6 combinations
    # Min length = 3, so k <= len(groups), return 6
    print(f"Test 1: {sol.possibleStringCount('aabbbc', 3)}")  # Expected: 6
    
    # Test case 2: word = "aaabbb", k = 3  
    # Groups: [3, 3], total = 3*3 = 9 combinations
    # Min length = 2, but k = 3, so need DP
    print(f"Test 2: {sol.possibleStringCount('aaabbb', 3)}")  # Expected: 8
    
    # Test case 3: word = "aaabbb", k = 5
    # Groups: [3, 3], need strings of length >= 5
    print(f"Test 3: {sol.possibleStringCount('aaabbb', 5)}")  # Expected: 4

test_solution()
